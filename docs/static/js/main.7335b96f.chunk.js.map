{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,oCACC,0BAAMC,SAXU,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAOjB,2BACKO,KAAM,OACNC,MAAOT,EACPU,SArBgB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,uBCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,+BAAMA,EAAN,OCCCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECJX,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBvC,OAbCC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEEqB,EDd2BK,CAAc1B,GAAlCa,EAFsB,EAE3BN,KAAaa,EAFc,EAEdA,QAErB,OACG,oCACK,wBAAIJ,UAAU,qCAAd,IAAqDhB,EAArD,KAEEoB,GAAW,uBAAGJ,UAAU,oCAAb,WAEf,yBAAKA,UAAU,aAENH,EAAOJ,KAAK,SAAAC,GAAG,OACd,kBAAC,EAAD,eACIiB,IAAMjB,EAAIC,IACLD,UEnBhBkB,EAAe,WAAO,IAAD,EAGM1C,mBAAU,CAAC,iBAHjB,mBAGvB2C,EAHuB,KAGX5C,EAHW,KAU9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEM4C,EAAWpB,KAAK,SAAAT,GAAQ,OACvB,kBAAC,EAAD,CACA2B,IAAK3B,EACLA,SAAUA,U,MCjB7B8B,IAASC,OAEL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.7335b96f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            //llamar setCategories\n            setCategories( cats => [ inputValue, ...cats]);\n            setInputValue('');\n        }\n        \n    }\n    return (\n        <>\n         <form onSubmit={handleSubmit}>\n         <input \n              type= \"text\"\n              value={inputValue}\n              onChange={handleInputChange}/>\n         </form>\n         \n        </>\n    )\n}\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=15&api_key=JOJVzpNVmFGkyGVdOcAOgEU8mr7Wm294`;\n    const resp = await fetch( url );\n\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\n\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({category}) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n   \n    return (\n       <>\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n          <div className=\"card-grid\">\n              {\n                   images.map( img => (\n                    <GifGridItem \n                        key={ img.id }\n                        { ...img }\n                    />\n                ))\n              }\n       \n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                \n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n\n    }, [category])\n\n   return state;\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\n\nexport const GitExpertApp = () => {\n\n    \n    const [categories, setCategories] = useState( ['Harry Potter']);\n    \n    //para aÃ±adir una nueva categoria\n    /* const handledAdd = () => {\n       setCategories([...categories, 'HunterXhunter']);\n\n    }*/\n    return (\n        <>\n            <h2>GitExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n            \n            <ol>\n              {\n                  categories.map( category => \n                   <GifGrid \n                   key={category}\n                   category={category} \n                   />\n                  )\n              }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GitExpertApp } from './GitExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GitExpertApp />,\n    document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}